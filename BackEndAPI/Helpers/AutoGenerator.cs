using System;
using System.Text.RegularExpressions;
using BackEndAPI.Interfaces;

namespace BackEndAPI.Helpers
{
    public static class AutoGenerator
    {

        public static string AutoGeneratedStaffCode(int id)
        {
            if (id <= 0)
            {

                throw new InvalidOperationException(Message.InvalidId);

            }

            return $"SD{id.ToString("D4")}";

        }

        public static string AutoGeneratedUsername(string firstName, string lastName, IAsyncUserRepository repository)
        {

            if (firstName == null)
            {

                throw new ArgumentNullException(Message.NullFirstName);

            }

            string _firstName = Regex.Replace(firstName, @"\s+", " ").Trim();

            if (_firstName == "")
            {

                throw new Exception(Message.EmptyOrSpacesFirstName);

            }

            if (lastName == null)
            {

                throw new ArgumentNullException(Message.NullLastName);

            }

            string _lastName = Regex.Replace(lastName, @"\s+", " ").Trim();

            if (_lastName == "")
            {

                throw new Exception(Message.EmptyOrSpacesLastName);

            }

            string name = $"{_firstName.ToLower()} {_lastName.ToLower()}";
            string shortName = string.Empty;

            string[] nameParts = name.Trim().Split(' ');

            for (var index = 0; index < nameParts.Length; index++)
            {
                var part = nameParts[index];
                if (index == 0)
                    shortName += part;
                else
                {
                    shortName += part.Substring(0, 1);
                }
            }
            var result = repository.CountUsername(shortName);
            if (result == 0) return shortName;
            return $"{shortName}{result}";

        }

        public static string AutoGeneratedPassword(string username, DateTime dob)
        {
            if (username == null || username == "")
            {

                throw new ArgumentNullException(Message.NullOrEmptyUsername);

            }

            return $"{username}@{dob.Date.ToString("ddMMyyyy")}";

        }

        public static string AutoGeneratedAssetCode(int assetNumber, string prefix)
        {

            if (assetNumber < 0)
            {

                throw new InvalidOperationException(Message.AssetNumberError);

            }

            if (prefix == null)
            {

                throw new ArgumentNullException(Message.NullOrEmptyPrefix);

            }

            prefix = Regex.Replace(prefix, @"\s+", " ").Trim();

            if (prefix == "")
            {

                throw new ArgumentNullException(Message.NullOrEmptyPrefix);

            }

            return $"{prefix}{(assetNumber + 1).ToString("D6")}";

        }

    }
}